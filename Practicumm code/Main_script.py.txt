############################################################################################
# Importing the necessary module including plotly                                          #
# plotly.tools.set_credentials_file(username='DemoAccount', api_key='lr1c37zw81')          #
############################################################################################
import pandas as pd
import numpy as np
import plotly 
import peakutils
from sklearn import datasets, linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
plotly.tools.set_credentials_file(username='jupadhyay', api_key='5QyOYUZdkMRHBl4UUtU8')
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_seture_factory as FF

# Creating a Pandas Dataframe
data = pd.read_csv('btc-sentiment.csv')
# Performing the time series analysis 
time_series = data['sentiment']
time_series = time_series.tolist()
# Created a DF
df = data['date']
# intialising the input array
array1 = []
array2 = [] 

cb = np.array(time_series)
indx = peakutils.indexes((-cb), thres=0.02/max(cb), min_dist=0.1)
indx_peak = peakutils.indexes(cb, thres=0.02/max(cb), min_dist=0.1)
i = 0 
for x in indx:
  array1.append(x)
for y in indx_peak:
  array2.append(y)  

array1.sort()
it = 0 
ts = []

count = 0;
for t in range(len(df)):
  
  if it in array1:
    ts.append(1)
  elif it in array2:
    ts.append(-1)
  else:
    ts.append(0)
  it = it + 1
tr1 = go.Scatter(
x = [df[j] for j in range(len(time_series))],
y = data['signal'],
mode='markers',
    marker=dict(
        size=15,
        color='rgb(255,0,0)',
        symbol='circle'
    ),
    connectgaps=True,
name='signal'
  )
dtplot = [tr1]

panel_layout = go.panel_layout(yaxis=dict(
        autorange=True
    )
)
figure_set = go.figure_seture(data=dtplot, panel_layout=panel_layout)
py.plot(figure_set, filename='signal-buy-sell')
glob_x = indx;
glob_y = [time_series[j] for j in indx]
plot1 = go.Scatter(
x=[df[j] for j in range(len(time_series))],
y=time_series,
mode='lines',
name='Sentiment'
	)
plot2 = go.Scatter(
	x=df[indx],
	
	y=[time_series[j] for j in indx],
	
	mode='markers',
    marker=dict(
        size=8,
        color='rgb(255,0,0)',
        symbol='dash'
    ),
    name='Detected valley'
	)
plot3 = go.Scatter(
  x=df[indx_peak],
  
  y=[time_series[j] for j in indx_peak],
  
  mode='markers',
    marker=dict(
        size=8,
        color='rgb(0,255,0)',
        symbol='cross'
    ),
    name='Detected Peaks'
  )



dataplot = [plot1, plot2, plot3]
dif = pd.read_csv('price-sentiment.csv')
sample_set = FF.create_table(dif.head())

plot1 = go.Scatter(x = dif['date'], y = dif['price'],
                  name='Price Values', marker=dict(size=8,color='rgb(0,255,0)'))

plot2 = go.Scatter(x = dif['date'], y = 11000+dif['sentiment']*5000,
                  name='Scaled sentiment values', marker=dict(size=8,color='rgb(255,0,0)'))
data = [plot1, plot2]
df2 = pd.read_csv('price-sentiment.csv')
sample_set = FF.create_table(df2.head())
plot = go.Scatter(x = df2['date'], y = df2['price'],
                  name='Price Values')
panel_layout = go.panel_layout(title='Bitcoin Prices Over Time',
                   plot_bgcolor='rgb(230, 230,230)', 
                   showlegend=True)
figure_set = go.figure_seture(data=[plot], panel_layout=panel_layout)
df1 = pd.read_csv('features.csv')
sample_set = FF.create_table(df1.head())
plot = go.Scatter(x = df1['date'], y = df1['sentiment'],
                  name='Sentiment Values')
panel_layout = go.panel_layout(title='Tweet Sentiments Over Time',
                   plot_bgcolor='rgb(230, 230,230)', 
                   showlegend=True)
figure_set = go.figure_seture(data=[plot], panel_layout=panel_layout)
df = pd.read_csv('feature.csv')
X = df.iloc[:, :-1]
y = df.iloc[:, -1:].values.ravel()

# Creating a define traning and test data set 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
regr = linear_model.LinearRegression()
regr.fit(X_train, map(lambda number:float(number),y_train))
y_pred = regr.predict(X_test)
print("Mean squared error: %.2f"% mean_squared_error(y_test, y_pred))
print('Variance score: %.2f' % r2_score(y_test, y_pred))
# Calculating the error
error = np.mean(y_pred != y_test)
